# Auth Service 설정 (포트폴리오용)
# 사용자 관리 및 JWT 인증 서비스

server:
  port: 8081

spring:
  application:
    name: auth-service
  
  # PostgreSQL 데이터베이스 설정
  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5432/ddp_auth}
    driver-class-name: org.postgresql.Driver
    username: ${DB_USERNAME:ddp_user}
    password: ${DB_PASSWORD:ddp_password}
  
  # JPA 설정
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
  
  # Redis 설정 (URL 방식)
  data:
    redis:
      url: ${REDIS_URL:redis://:1234@localhost:6379}
      timeout: ${REDIS_TIMEOUT:2000ms}
      database: ${REDIS_DATABASE:0}

# JWT 설정
jwt:
  secret: ${JWT_SECRET:myDevelopmentSecretKeyForDDPProject32Chars}
  access-token-expiration: 3600 # 1시간
  refresh-token-expiration: 604800 # 7일
  cookie:
    # Access Token 쿠키 설정
    name: jwt
    max-age: 3600 # 쿠키 만료시간: 1시간 (초)
    # Refresh Token 쿠키 설정
    refresh-name: refreshToken
    refresh-max-age: 604800 # 쿠키 만료시간: 7일 (초)
    # 공통 쿠키 보안 설정
    secure: ${JWT_COOKIE_SECURE:false} # 개발환경: false, 운영환경: true (HTTPS에서만 전송)
    http-only: ${JWT_COOKIE_HTTP_ONLY:true} # XSS 방지
    same-site: ${JWT_COOKIE_SAME_SITE:strict} # CSRF 방지

# Auth Service 로깅 설정
logging:
  pattern:
    console: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr([%thread]){magenta} %clr(%-5level){highlight} %clr(%logger{36}){cyan} - %msg%n"
  level:
    com.ddp.auth: DEBUG
    org.springframework.security: INFO
    org.springframework.data.redis: INFO
    org.hibernate.SQL: DEBUG

# 액추에이터 및 Health Check 설정
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,refresh
  endpoint:
    health:
      show-details: always
  health:
    redis:
      enabled: ${REDIS_HEALTH_CHECK:true}